<?xml version="1.0" encoding="UTF-8"?>
<!--web.xml加载循序context-param -> listener -> filter -> servlet-->
<web-app version="2.5" >
	<display-name>desktop</display-name><!--display-name定义了WEB应用的名字 -->
	<welcome-file-list>	<!--指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件。-->
		<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>
	
	<!--context-param 声明应用范围内的初始化参数-->
	<!-- 规定配置文件的访问地址    加载多个spring配置文件 -->
	<context-param>   
		<param-name>contextConfigLocation</param-name>
		<!-- <param-value>/WEB-INF/applicationContext-*.xml,classpath*:applicationContext-*.xml</param-value>  -->
		<param-value>classpath:beans*.xml</param-value>
	</context-param>
		
	<!--事件监听程序在建立、修改和删除会话或servlet环境时得到通知
	它会在创建时自动查找WEB-INF下的applicationContext.xml文件 ,从而创建spring容器
	-->
	<!--启用spring的监听器-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		<!-- default: /WEB-INF/applicationContext.xml -->
	</listener>
		
	<!--filter过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联-->
	<!--获取系统路径变量-->
	<filter>  
	    <filter-name>springSecurityFilterChain</filter-name>  
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  
	</filter>  
	<!--filter-mapping一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。-->
	<filter-mapping>  
	    <filter-name>springSecurityFilterChain</filter-name>  
	    <url-pattern>/*</url-pattern>  
	</filter-mapping>
	
	<!--启用自定义的监听-->
	<listener>
		<listener-class>com.desktop.listener.PcContextLintener</listener-class>
	</listener>
	
	<filter>
		<filter-name>openSessionInView</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>sessionFactoryBeanName</param-name>
			<param-value>sf</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>openSessionInView</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--servlet在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。
	Servlet元素就是用来完成此项任务的-->
	<!-- 设置使用struts2过滤的Action-->
	<servlet>
		<servlet-name>struts2</servlet-name> 
		<display-name>struts2</display-name> 
		<description>struts2 Servlet</description> 
		<servlet-class>org.apache.struts2.dispatcher.ng.servlet.StrutsServlet</servlet-class> 
	</servlet>
	<!--
	服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName。 
	但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。在更改缺
	省URL时，使用servlet-mapping元素。
	-->
	<servlet-mapping> 
		<servlet-name>struts2</servlet-name> 
		<url-pattern>*.action</url-pattern> 
	</servlet-mapping>
	<servlet-mapping> 
		<servlet-name>struts2</servlet-name> 
		<url-pattern>/j_spring_security_check</url-pattern> 
	</servlet-mapping>
	<servlet-mapping> 
		<servlet-name>struts2</servlet-name> 
		<url-pattern>/j_spring_security_logout</url-pattern> 
	</servlet-mapping>
	
	<!--
	如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。 
	可通过使用HttpSession的setMaxInactiveInterval方法明确设置单
	个会话对象的超时值，或者可利用session-config元素制定缺省超时值。
	 -->
	<!--失效时间设为2个小时-->
	<session-config>
         <session-timeout>-1</session-timeout>
	</session-config>
	<!--security登录管理配置-->
	<!--<security-constraint></security-constraint> 制定应该保护的URL。它与login-config元素联合使用 -->
	
	<!-- Spring权限控制框架 --> 
	
	<!--通过错误码来配置error-page 面配置了当系统发生404错误时，跳转到错误处理页面NotFound.jsp -->
	<error-page> 
		<error-code>404</error-code>
		<location>/NotFound.jsp</location> 
	</error-page>
	
	<!--通过异常的类型配置error-page -->
	<error-page> 
		<exception-type>java.lang.NullException</exception-type> 
		<location>/error.jsp</location> 
	</error-page> 
	
</web-app>